/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Todo list api
 * OpenAPI spec version: 0.0.1
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import type {
  Todo,
  TodoListResponseResponse,
  TodoPatch,
  TodoResponseResponse,
} from "./model";
import { apiInstance } from "../instance";
import type { BodyType } from "../instance";

export const getTodosList = (signal?: AbortSignal) => {
  return apiInstance<TodoListResponseResponse>({
    url: `/todos`,
    method: "GET",
    signal,
  });
};

export const getGetTodosListQueryKey = () => {
  return [`/todos`] as const;
};

export const getGetTodosListQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodosList>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodosList>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodosList>>> = ({
    signal,
  }) => getTodosList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodosList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTodosListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodosList>>
>;
export type GetTodosListQueryError = unknown;

export const useGetTodosList = <
  TData = Awaited<ReturnType<typeof getTodosList>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTodosList>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTodosListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetTodosListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodosList>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getTodosList>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodosList>>> = ({
    signal,
  }) => getTodosList(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getTodosList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTodosListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodosList>>
>;
export type GetTodosListSuspenseQueryError = unknown;

export const useGetTodosListSuspense = <
  TData = Awaited<ReturnType<typeof getTodosList>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getTodosList>>,
      TError,
      TData
    >
  >;
}): UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTodosListSuspenseQueryOptions(options);

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const createTodoItem = (todo: BodyType<Todo>) => {
  return apiInstance<TodoResponseResponse>({
    url: `/todos`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: todo,
  });
};

export const getCreateTodoItemMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTodoItem>>,
    TError,
    { data: BodyType<Todo> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTodoItem>>,
  TError,
  { data: BodyType<Todo> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTodoItem>>,
    { data: BodyType<Todo> }
  > = (props) => {
    const { data } = props ?? {};

    return createTodoItem(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTodoItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTodoItem>>
>;
export type CreateTodoItemMutationBody = BodyType<Todo>;
export type CreateTodoItemMutationError = unknown;

export const useCreateTodoItem = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTodoItem>>,
    TError,
    { data: BodyType<Todo> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createTodoItem>>,
  TError,
  { data: BodyType<Todo> },
  TContext
> => {
  const mutationOptions = getCreateTodoItemMutationOptions(options);

  return useMutation(mutationOptions);
};
export const updateTodoItem = (
  todoId: string,
  todoPatch: BodyType<TodoPatch>
) => {
  return apiInstance<TodoResponseResponse>({
    url: `/todos/${todoId}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: todoPatch,
  });
};

export const getUpdateTodoItemMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodoItem>>,
    TError,
    { todoId: string; data: BodyType<TodoPatch> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodoItem>>,
  TError,
  { todoId: string; data: BodyType<TodoPatch> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodoItem>>,
    { todoId: string; data: BodyType<TodoPatch> }
  > = (props) => {
    const { todoId, data } = props ?? {};

    return updateTodoItem(todoId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTodoItem>>
>;
export type UpdateTodoItemMutationBody = BodyType<TodoPatch>;
export type UpdateTodoItemMutationError = unknown;

export const useUpdateTodoItem = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodoItem>>,
    TError,
    { todoId: string; data: BodyType<TodoPatch> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateTodoItem>>,
  TError,
  { todoId: string; data: BodyType<TodoPatch> },
  TContext
> => {
  const mutationOptions = getUpdateTodoItemMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteTodoItem = (todoId: string) => {
  return apiInstance<void>({ url: `/todos/${todoId}`, method: "DELETE" });
};

export const getDeleteTodoItemMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodoItem>>,
    TError,
    { todoId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTodoItem>>,
  TError,
  { todoId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTodoItem>>,
    { todoId: string }
  > = (props) => {
    const { todoId } = props ?? {};

    return deleteTodoItem(todoId);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodoItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTodoItem>>
>;

export type DeleteTodoItemMutationError = unknown;

export const useDeleteTodoItem = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodoItem>>,
    TError,
    { todoId: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTodoItem>>,
  TError,
  { todoId: string },
  TContext
> => {
  const mutationOptions = getDeleteTodoItemMutationOptions(options);

  return useMutation(mutationOptions);
};
